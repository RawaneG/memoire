{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nconst API_BASE_URL = 'http://localhost:5000';\nexport const useApi = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async (endpoint, options = {}) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const url = `${API_BASE_URL}${endpoint}`;\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const predict = useCallback(async (country, model, horizon) => {\n    const params = new URLSearchParams({\n      country,\n      model,\n      horizon: horizon.toString()\n    });\n    return request(`/predict?${params}`);\n  }, [request]);\n  const getCountries = useCallback(async () => {\n    return request('/countries');\n  }, [request]);\n  const getModels = useCallback(async () => {\n    return request('/models');\n  }, [request]);\n  const getHealth = useCallback(async () => {\n    return request('/health');\n  }, [request]);\n  return {\n    loading,\n    error,\n    predict,\n    getCountries,\n    getModels,\n    getHealth,\n    clearError: () => setError(null)\n  };\n};\n_s(useApi, \"VYpUo+V5+w9rPovuAyW8oNpy+u0=\");","map":{"version":3,"names":["useState","useCallback","API_BASE_URL","useApi","_s","loading","setLoading","error","setError","request","endpoint","options","url","response","fetch","headers","ok","Error","status","statusText","data","json","err","message","predict","country","model","horizon","params","URLSearchParams","toString","getCountries","getModels","getHealth","clearError"],"sources":["C:/Users/snsowr/Desktop/Code/OWID/frontend/src/hooks/useApi.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nconst API_BASE_URL = 'http://localhost:5000';\n\nexport const useApi = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (endpoint, options = {}) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const url = `${API_BASE_URL}${endpoint}`;\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n        ...options,\n      });\n\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const predict = useCallback(async (country, model, horizon) => {\n    const params = new URLSearchParams({\n      country,\n      model,\n      horizon: horizon.toString(),\n    });\n    \n    return request(`/predict?${params}`);\n  }, [request]);\n\n  const getCountries = useCallback(async () => {\n    return request('/countries');\n  }, [request]);\n\n  const getModels = useCallback(async () => {\n    return request('/models');\n  }, [request]);\n\n  const getHealth = useCallback(async () => {\n    return request('/health');\n  }, [request]);\n\n  return {\n    loading,\n    error,\n    predict,\n    getCountries,\n    getModels,\n    getHealth,\n    clearError: () => setError(null),\n  };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMS,OAAO,GAAGR,WAAW,CAAC,OAAOS,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC5DL,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMI,GAAG,GAAG,GAAGV,YAAY,GAAGQ,QAAQ,EAAE;MACxC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;QAChCG,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,GAAGJ,OAAO,CAACI;QACb,CAAC;QACD,GAAGJ;MACL,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAcJ,QAAQ,CAACK,MAAM,IAAIL,QAAQ,CAACM,UAAU,EAAE,CAAC;MACzE;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX,CAAC,SAAS;MACRhB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,OAAO,GAAGvB,WAAW,CAAC,OAAOwB,OAAO,EAAEC,KAAK,EAAEC,OAAO,KAAK;IAC7D,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCJ,OAAO;MACPC,KAAK;MACLC,OAAO,EAAEA,OAAO,CAACG,QAAQ,CAAC;IAC5B,CAAC,CAAC;IAEF,OAAOrB,OAAO,CAAC,YAAYmB,MAAM,EAAE,CAAC;EACtC,CAAC,EAAE,CAACnB,OAAO,CAAC,CAAC;EAEb,MAAMsB,YAAY,GAAG9B,WAAW,CAAC,YAAY;IAC3C,OAAOQ,OAAO,CAAC,YAAY,CAAC;EAC9B,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAMuB,SAAS,GAAG/B,WAAW,CAAC,YAAY;IACxC,OAAOQ,OAAO,CAAC,SAAS,CAAC;EAC3B,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAMwB,SAAS,GAAGhC,WAAW,CAAC,YAAY;IACxC,OAAOQ,OAAO,CAAC,SAAS,CAAC;EAC3B,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,OAAO;IACLJ,OAAO;IACPE,KAAK;IACLiB,OAAO;IACPO,YAAY;IACZC,SAAS;IACTC,SAAS;IACTC,UAAU,EAAEA,CAAA,KAAM1B,QAAQ,CAAC,IAAI;EACjC,CAAC;AACH,CAAC;AAACJ,EAAA,CA/DWD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}